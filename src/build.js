"use strict"; function createCommonjsModule(r, t) { return t = { exports: {} }, r(t, t.exports), t.exports } function isFunction(r) { return "function" == typeof r } function isObject(r) { return null != r && "object" == typeof r } function tryCatcher() { try { return tryCatchTarget.apply(this, arguments) } catch (r) { return errorObject.errorObject.e = r, errorObject.errorObject } } function tryCatch(r) { return tryCatchTarget = r, tryCatcher } function flattenUnsubscriptionErrors(r) { return r.reduce(function (r, t) { return r.concat(t instanceof UnsubscriptionError_1.UnsubscriptionError ? t.errors : t) }, []) } function toSubscriber(r, t, e) { if (r) { if (r instanceof Subscriber_1.Subscriber) return r; if (r[rxSubscriber.rxSubscriber]) return r[rxSubscriber.rxSubscriber]() } return r || t || e ? new Subscriber_1.Subscriber(r, t, e) : new Subscriber_1.Subscriber(Observer.empty) } function isScheduler(r) { return r && "function" == typeof r.schedule } function map$2(r, t) { if ("function" != typeof r) throw new TypeError("argument is not a function. Are you looking for `mapTo()`?"); return this.lift(new MapOperator(r, t)) } function xxx(r) { Observable_2.of(1, 2, 3).map(r => r + "!!!").subscribe(t => console.log(r)) } var commonjsGlobal = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {}, __window = "undefined" != typeof window && window, __self = "undefined" != typeof self && "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope && self, __global = void 0 !== commonjsGlobal && commonjsGlobal, _root = __window || __global || __self, root_1 = _root; !function () { if (!_root) throw new Error("RxJS could not find any global context (window, self, global)") }(); var root = { root: root_1 }, isFunction_2 = isFunction, isFunction_1 = { isFunction: isFunction_2 }, isArray_1 = Array.isArray || function (r) { return r && "number" == typeof r.length }, isArray = { isArray: isArray_1 }, isObject_2 = isObject, isObject_1 = { isObject: isObject_2 }, errorObject_1 = { e: {} }, errorObject = { errorObject: errorObject_1 }, tryCatchTarget, tryCatch_2 = tryCatch, tryCatch_1 = { tryCatch: tryCatch_2 }, __extends$1 = commonjsGlobal && commonjsGlobal.__extends || function (r, t) { function e() { this.constructor = r } for (var o in t) t.hasOwnProperty(o) && (r[o] = t[o]); r.prototype = null === t ? Object.create(t) : (e.prototype = t.prototype, new e) }, UnsubscriptionError = function (r) { function t(t) { r.call(this), this.errors = t; var e = Error.call(this, t ? t.length + " errors occurred during unsubscription:\n  " + t.map(function (r, t) { return t + 1 + ") " + r.toString() }).join("\n  ") : ""); this.name = e.name = "UnsubscriptionError", this.stack = e.stack, this.message = e.message } return __extends$1(t, r), t }(Error), UnsubscriptionError_2 = UnsubscriptionError, UnsubscriptionError_1 = { UnsubscriptionError: UnsubscriptionError_2 }, Subscription = function () { function r(r) { this.closed = !1, this._parent = null, this._parents = null, this._subscriptions = null, r && (this._unsubscribe = r) } return r.prototype.unsubscribe = function () { var r, t = !1; if (!this.closed) { var e = this, o = e._parent, s = e._parents, n = e._unsubscribe, i = e._subscriptions; this.closed = !0, this._parent = null, this._parents = null, this._subscriptions = null; for (var c = -1, b = s ? s.length : 0; o;)o.remove(this), o = ++c < b && s[c] || null; if (isFunction_1.isFunction(n) && (a = tryCatch_1.tryCatch(n).call(this)) === errorObject.errorObject && (t = !0, r = r || (errorObject.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject.errorObject.e.errors) : [errorObject.errorObject.e])), isArray.isArray(i)) for (c = -1, b = i.length; ++c < b;) { var u = i[c]; if (isObject_1.isObject(u)) { var a = tryCatch_1.tryCatch(u.unsubscribe).call(u); if (a === errorObject.errorObject) { t = !0, r = r || []; var l = errorObject.errorObject.e; l instanceof UnsubscriptionError_1.UnsubscriptionError ? r = r.concat(flattenUnsubscriptionErrors(l.errors)) : r.push(l) } } } if (t) throw new UnsubscriptionError_1.UnsubscriptionError(r) } }, r.prototype.add = function (t) { if (!t || t === r.EMPTY) return r.EMPTY; if (t === this) return this; var e = t; switch (typeof t) { case "function": e = new r(t); case "object": if (e.closed || "function" != typeof e.unsubscribe) return e; if (this.closed) return e.unsubscribe(), e; if ("function" != typeof e._addParent) { var o = e; (e = new r)._subscriptions = [o] } break; default: throw new Error("unrecognized teardown " + t + " added to Subscription.") }return (this._subscriptions || (this._subscriptions = [])).push(e), e._addParent(this), e }, r.prototype.remove = function (r) { var t = this._subscriptions; if (t) { var e = t.indexOf(r); -1 !== e && t.splice(e, 1) } }, r.prototype._addParent = function (r) { var t = this, e = t._parent, o = t._parents; e && e !== r ? o ? -1 === o.indexOf(r) && o.push(r) : this._parents = [r] : this._parent = r }, r.EMPTY = function (r) { return r.closed = !0, r }(new r), r }(), Subscription_2 = Subscription, Subscription_1 = { Subscription: Subscription_2 }, empty = { closed: !0, next: function (r) { }, error: function (r) { throw r }, complete: function () { } }, Observer = { empty: empty }, rxSubscriber = createCommonjsModule(function (r, t) { var e = root.root.Symbol; t.rxSubscriber = "function" == typeof e && "function" == typeof e.for ? e.for("rxSubscriber") : "@@rxSubscriber", t.$$rxSubscriber = t.rxSubscriber }), __extends = commonjsGlobal && commonjsGlobal.__extends || function (r, t) { function e() { this.constructor = r } for (var o in t) t.hasOwnProperty(o) && (r[o] = t[o]); r.prototype = null === t ? Object.create(t) : (e.prototype = t.prototype, new e) }, Subscriber = function (r) { function t(e, o, s) { switch (r.call(this), this.syncErrorValue = null, this.syncErrorThrown = !1, this.syncErrorThrowable = !1, this.isStopped = !1, arguments.length) { case 0: this.destination = Observer.empty; break; case 1: if (!e) { this.destination = Observer.empty; break } if ("object" == typeof e) { e instanceof t ? (this.destination = e, this.destination.add(this)) : (this.syncErrorThrowable = !0, this.destination = new SafeSubscriber(this, e)); break } default: this.syncErrorThrowable = !0, this.destination = new SafeSubscriber(this, e, o, s) } } return __extends(t, r), t.prototype[rxSubscriber.rxSubscriber] = function () { return this }, t.create = function (r, e, o) { var s = new t(r, e, o); return s.syncErrorThrowable = !1, s }, t.prototype.next = function (r) { this.isStopped || this._next(r) }, t.prototype.error = function (r) { this.isStopped || (this.isStopped = !0, this._error(r)) }, t.prototype.complete = function () { this.isStopped || (this.isStopped = !0, this._complete()) }, t.prototype.unsubscribe = function () { this.closed || (this.isStopped = !0, r.prototype.unsubscribe.call(this)) }, t.prototype._next = function (r) { this.destination.next(r) }, t.prototype._error = function (r) { this.destination.error(r), this.unsubscribe() }, t.prototype._complete = function () { this.destination.complete(), this.unsubscribe() }, t.prototype._unsubscribeAndRecycle = function () { var r = this, t = r._parent, e = r._parents; return this._parent = null, this._parents = null, this.unsubscribe(), this.closed = !1, this.isStopped = !1, this._parent = t, this._parents = e, this }, t }(Subscription_1.Subscription), Subscriber_2 = Subscriber, SafeSubscriber = function (r) { function t(t, e, o, s) { r.call(this), this._parentSubscriber = t; var n, i = this; isFunction_1.isFunction(e) ? n = e : e && (n = e.next, o = e.error, s = e.complete, e !== Observer.empty && (i = Object.create(e), isFunction_1.isFunction(i.unsubscribe) && this.add(i.unsubscribe.bind(i)), i.unsubscribe = this.unsubscribe.bind(this))), this._context = i, this._next = n, this._error = o, this._complete = s } return __extends(t, r), t.prototype.next = function (r) { if (!this.isStopped && this._next) { var t = this._parentSubscriber; t.syncErrorThrowable ? this.__tryOrSetError(t, this._next, r) && this.unsubscribe() : this.__tryOrUnsub(this._next, r) } }, t.prototype.error = function (r) { if (!this.isStopped) { var t = this._parentSubscriber; if (this._error) t.syncErrorThrowable ? (this.__tryOrSetError(t, this._error, r), this.unsubscribe()) : (this.__tryOrUnsub(this._error, r), this.unsubscribe()); else { if (!t.syncErrorThrowable) throw this.unsubscribe(), r; t.syncErrorValue = r, t.syncErrorThrown = !0, this.unsubscribe() } } }, t.prototype.complete = function () { var r = this; if (!this.isStopped) { var t = this._parentSubscriber; if (this._complete) { var e = function () { return r._complete.call(r._context) }; t.syncErrorThrowable ? (this.__tryOrSetError(t, e), this.unsubscribe()) : (this.__tryOrUnsub(e), this.unsubscribe()) } else this.unsubscribe() } }, t.prototype.__tryOrUnsub = function (r, t) { try { r.call(this._context, t) } catch (r) { throw this.unsubscribe(), r } }, t.prototype.__tryOrSetError = function (r, t, e) { try { t.call(this._context, e) } catch (t) { return r.syncErrorValue = t, r.syncErrorThrown = !0, !0 } return !1 }, t.prototype._unsubscribe = function () { var r = this._parentSubscriber; this._context = null, this._parentSubscriber = null, r.unsubscribe() }, t }(Subscriber), Subscriber_1 = { Subscriber: Subscriber_2 }, toSubscriber_2 = toSubscriber, toSubscriber_1 = { toSubscriber: toSubscriber_2 }, observable = createCommonjsModule(function (r, t) { function e(r) { var t, e = r.Symbol; return "function" == typeof e ? e.observable ? t = e.observable : (t = e("observable"), e.observable = t) : t = "@@observable", t } t.getSymbolObservable = e, t.observable = e(root.root), t.$$observable = t.observable }), Observable = function () { function r(r) { this._isScalar = !1, r && (this._subscribe = r) } return r.prototype.lift = function (t) { var e = new r; return e.source = this, e.operator = t, e }, r.prototype.subscribe = function (r, t, e) { var o = this.operator, s = toSubscriber_1.toSubscriber(r, t, e); if (o ? o.call(s, this.source) : s.add(this.source ? this._subscribe(s) : this._trySubscribe(s)), s.syncErrorThrowable && (s.syncErrorThrowable = !1, s.syncErrorThrown)) throw s.syncErrorValue; return s }, r.prototype._trySubscribe = function (r) { try { return this._subscribe(r) } catch (t) { r.syncErrorThrown = !0, r.syncErrorValue = t, r.error(t) } }, r.prototype.forEach = function (r, t) { var e = this; if (t || (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise ? t = root.root.Rx.config.Promise : root.root.Promise && (t = root.root.Promise)), !t) throw new Error("no Promise impl found"); return new t(function (t, o) { var s; s = e.subscribe(function (t) { if (s) try { r(t) } catch (r) { o(r), s.unsubscribe() } else r(t) }, o, t) }) }, r.prototype._subscribe = function (r) { return this.source.subscribe(r) }, r.prototype[observable.observable] = function () { return this }, r.create = function (t) { return new r(t) }, r }(), Observable_2 = Observable, Observable_1 = { Observable: Observable_2 }, __extends$3 = commonjsGlobal && commonjsGlobal.__extends || function (r, t) { function e() { this.constructor = r } for (var o in t) t.hasOwnProperty(o) && (r[o] = t[o]); r.prototype = null === t ? Object.create(t) : (e.prototype = t.prototype, new e) }, ScalarObservable = function (r) { function t(t, e) { r.call(this), this.value = t, this.scheduler = e, this._isScalar = !0, e && (this._isScalar = !1) } return __extends$3(t, r), t.create = function (r, e) { return new t(r, e) }, t.dispatch = function (r) { var t = r.done, e = r.value, o = r.subscriber; t ? o.complete() : (o.next(e), o.closed || (r.done = !0, this.schedule(r))) }, t.prototype._subscribe = function (r) { var e = this.value, o = this.scheduler; if (o) return o.schedule(t.dispatch, 0, { done: !1, value: e, subscriber: r }); r.next(e), r.closed || r.complete() }, t }(Observable_1.Observable), ScalarObservable_2 = ScalarObservable, ScalarObservable_1 = { ScalarObservable: ScalarObservable_2 }, __extends$4 = commonjsGlobal && commonjsGlobal.__extends || function (r, t) { function e() { this.constructor = r } for (var o in t) t.hasOwnProperty(o) && (r[o] = t[o]); r.prototype = null === t ? Object.create(t) : (e.prototype = t.prototype, new e) }, EmptyObservable = function (r) { function t(t) { r.call(this), this.scheduler = t } return __extends$4(t, r), t.create = function (r) { return new t(r) }, t.dispatch = function (r) { r.subscriber.complete() }, t.prototype._subscribe = function (r) { var e = this.scheduler; if (e) return e.schedule(t.dispatch, 0, { subscriber: r }); r.complete() }, t }(Observable_1.Observable), EmptyObservable_2 = EmptyObservable, EmptyObservable_1 = { EmptyObservable: EmptyObservable_2 }, isScheduler_2 = isScheduler, isScheduler_1 = { isScheduler: isScheduler_2 }, __extends$2 = commonjsGlobal && commonjsGlobal.__extends || function (r, t) { function e() { this.constructor = r } for (var o in t) t.hasOwnProperty(o) && (r[o] = t[o]); r.prototype = null === t ? Object.create(t) : (e.prototype = t.prototype, new e) }, ArrayObservable = function (r) { function t(t, e) { r.call(this), this.array = t, this.scheduler = e, e || 1 !== t.length || (this._isScalar = !0, this.value = t[0]) } return __extends$2(t, r), t.create = function (r, e) { return new t(r, e) }, t.of = function () { for (var r = [], e = 0; e < arguments.length; e++)r[e - 0] = arguments[e]; var o = r[r.length - 1]; isScheduler_1.isScheduler(o) ? r.pop() : o = null; var s = r.length; return s > 1 ? new t(r, o) : 1 === s ? new ScalarObservable_1.ScalarObservable(r[0], o) : new EmptyObservable_1.EmptyObservable(o) }, t.dispatch = function (r) { var t = r.array, e = r.index, o = r.count, s = r.subscriber; e >= o ? s.complete() : (s.next(t[e]), s.closed || (r.index = e + 1, this.schedule(r))) }, t.prototype._subscribe = function (r) { var e = this.array, o = e.length, s = this.scheduler; if (s) return s.schedule(t.dispatch, 0, { array: e, index: 0, count: o, subscriber: r }); for (var n = 0; n < o && !r.closed; n++)r.next(e[n]); r.complete() }, t }(Observable_1.Observable), ArrayObservable_2 = ArrayObservable, ArrayObservable_1 = { ArrayObservable: ArrayObservable_2 }, of_1 = ArrayObservable_1.ArrayObservable.of, of$2 = { of: of_1 }; Observable_1.Observable.of = of$2.of; var __extends$5 = commonjsGlobal && commonjsGlobal.__extends || function (r, t) { function e() { this.constructor = r } for (var o in t) t.hasOwnProperty(o) && (r[o] = t[o]); r.prototype = null === t ? Object.create(t) : (e.prototype = t.prototype, new e) }, map_2 = map$2, MapOperator = function () { function r(r, t) { this.project = r, this.thisArg = t } return r.prototype.call = function (r, t) { return t.subscribe(new MapSubscriber(r, this.project, this.thisArg)) }, r }(), MapOperator_1 = MapOperator, MapSubscriber = function (r) { function t(t, e, o) { r.call(this, t), this.project = e, this.count = 0, this.thisArg = o || this } return __extends$5(t, r), t.prototype._next = function (r) { var t; try { t = this.project.call(this.thisArg, r, this.count++) } catch (r) { return void this.destination.error(r) } this.destination.next(t) }, t }(Subscriber_1.Subscriber), map_1 = { map: map_2, MapOperator: MapOperator_1 }; Observable_1.Observable.prototype.map = map_1.map, Observable_2.of(1, 2, 3).map(r => r + "global").subscribe(r => console.log(r)), module.exports = xxx;
